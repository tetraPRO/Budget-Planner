
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author capphil1
 */
public class StockFutureData {
    
    public ArrayList<String> accounts = null;
   public  ArrayList<String> returns = null;
   public  ArrayList<String> qoutes  = null;
   public  ArrayList<String> symbol = null;
   public ArrayList<String> symbolOnceOnly = null;
    public  ArrayList<String>  type = null;
    public  ArrayList<String> strike =  null;
    public  ArrayList<String> expiration =  null;;
    public  ArrayList<String> bid = null;
    public  ArrayList<String> ask =  null;
    public  ArrayList<String> last =  null;
    public  ArrayList<String> volume =  null;
    public  ArrayList<String>  openInterest =  null;
    public  ArrayList<String> volatility= null;
    public  ArrayList<String> time=  null;
    public ArrayList<String> futureOptions = null;
    public ArrayList<String> name_F = null;
    public ArrayList<String> contract_F = null;
    public ArrayList<String> last_F = null;
    public ArrayList<String> change_F = null;
    public ArrayList<String> open_F = null;
    public ArrayList<String> high_F = null;
    public ArrayList<String> low_F = null;
    public ArrayList<String> time_F = null;
    public ArrayList<String> returns_F = null; 
    public ArrayList<String> qoutes_F = null; 
    public ArrayList<String> tradingData = null;
    
    public StockFutureData(){
        initComps();
    }
    
    private void initComps(){
        setArrayCols();
        setArraysCols_F();
        setHashSet();
    }
    
    public ArrayList getFutureOpportunities(){
        Document doc;
        ArrayList<String> prices = new ArrayList<>();
        String option;
         
        try{
            for(int j=3;j<11;j++){
                doc = Jsoup.connect("http://www.barchart.com/commodityfutures/All").timeout(0).get();
                
                Element table= doc.select("table").get(j);
                Elements rows = table.select("tr");

                for(int i=1;i<rows.size();i++){
                    Element row = rows.get(i);
                    Elements cols = row.select("td");
                     option = cols.text();
                     
                     if(j == 8 && i == 4){
                        
                    }else{
                         prices.add(option); 
                    }
                }
            }   
        } catch (IOException e){
            JOptionPane.showMessageDialog(null, e);
        }return prices;
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     *  Build a url link to a barchart excel file with a list of the options with
     *  the highest implied volatilities. Read each line and add to arraylist.
     * @param string either future or stock market
     * @return arraylist of the data from barchart
     */
    private  ArrayList getOpportunities(){
        String nextLine;
         ArrayList<String> list = new ArrayList<>();
                 
             String stockVolatility= "http://www.barchart.com/option-center/getExcel.php?type=stocks&page=Highest%20Implied%"
                     + "20Volatility&dir=desc&sort=volatility&filter_conditions=a%3A3%3A%7Bi%3A0%3Ba%3A3%3A%7Bi%"
                     + "3A0%3Bs%3A10%3A%22volatility%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A1%"
                     + "3A%220%22%3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%"
                     + "3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22500%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%3A0%"
                     + "3Bs%3A13%3A%22open_interest%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%"
                     + "22100%22%3B%7D%7D&f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,volatility,"
                     + "timestamp&fn=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,Volatility,Time";
             
             String etfVolatility = "http://www.barchart.com/option-center/getExcel.php?type=etfs&page=Highest%20Implied%"
                     + "20Volatility&dir=desc&sort=volatility&filter_conditions=a%3A3%3A%7Bi%3A0%3Ba%3A3%3A%7Bi%3A0%"
                     + "3Bs%3A10%3A%22volatility%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A1%3A%220%22%"
                     + "3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%22%3E%"
                     + "22%3Bi%3A2%3Bs%3A3%3A%22500%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%3A0%3Bs%3A13%3A%"
                     + "22open_interest%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%3B%7D%"
                     + "7D&f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,volatility,timestamp&"
                     + "fn=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,Volatility,Time";
             
             String stocksIncreaseIV = "http://www.barchart.com/option-center/getExcel.php?type=stocks&page=Top%20%%20Increase%"
                     + "0in%20Implied%20Volatility&dir=desc&sort=volatility_pctchange&filter_conditions=a%3A4%3A%7Bi%3A0%3Ba%"
                     + "3A3%3A%7Bi%3A0%3Bs%3A10%3A%22volatility%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%"
                     + "3A1%3A%220%22%3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%"
                     + "3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22500%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%3A0%3Bs%"
                     + "3A13%3A%22open_interest%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%"
                     + "3B%7Di%3A3%3Ba%3A3%3A%7Bi%3A0%3Bs%3A20%3A%22volatility_pctchange%22%3Bi%3A1%3Bs%3A1%"
                     + "3A%22%3E%22%3Bi%3A2%3Bs%3A1%3A%220%22%3B%7D%7D&"
                     + "f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,volatility,volatility_pctchange,timestamp&"
                     + "fn=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,Volatility,Volatility%20Chg,Time";
             
             String etfIncreaseIV = "http://www.barchart.com/option-center/getExcel.php?type=etfs&page=Top%20%%20Increase%20in%"
                     + "20Implied%20Volatility&dir=desc&sort=volatility_pctchange&filter_conditions=a%3A4%3A%7Bi%3A0%3Ba%3A3%"
                     + "3A%7Bi%3A0%3Bs%3A10%3A%22volatility%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A1%"
                     + "3A%220%22%3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%"
                     + "22%3E%22%3Bi%3A2%3Bs%3A3%3A%22500%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%3A0%3Bs%3A13%3A%"
                     + "22open_interest%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%3B%7Di%3A3%"
                     + "3Ba%3A3%3A%7Bi%3A0%3Bs%3A20%3A%22volatility_pctchange%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%"
                     + "3Bi%3A2%3Bs%3A1%3A%220%22%3B%7D%7D&"
                     + "f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,volatility,volatility_pctchange,timestamp&"
                     + "fn=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,Volatility,Volatility%20Chg,Time";
             
             String etfVolume = "http://www.barchart.com/option-center/getExcel.php?type=etfs&page=Options%20by%20Daily%"
                     + "20Volume&dir=desc&sort=volume&filter_conditions=a%3A3%3A%7Bi%3A0%3Ba%3A3%3A%7Bi%3A0%"
                     + "3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A1%3A%220%"
                     + "22%3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%"
                     + "22%3E%22%3Bi%3A2%3Bs%3A3%3A%22500%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%3A0%3Bs%3A13%"
                     + "3A%22open_interest%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%3B%"
                     + "7D%7D&f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,volatility,timestamp&"
                     + "fn=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,Volatility,Time";
             
             String stockVolume = "http://www.barchart.com/option-center/getExcel.php?type=stocks&page=Options%20by%20Daily%"
                     + "20Volume&dir=desc&sort=volume&filter_conditions=a%3A3%3A%7Bi%3A0%3Ba%3A3%3A%7Bi%3A0%3Bs%"
                     + "3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A1%3A%220%22%3B%7Di%"
                     + "3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%"
                     + "3A2%3Bs%3A3%3A%22500%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%3A0%3Bs%3A13%3A%22open_interest%"
                     + "22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%3B%7D%7D&"
                     + "f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,volatility,timestamp&"
                     + "fn=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,Volatility,Time";
             
             String stockIncreaseOI = "http://www.barchart.com/option-center/getExcel.php?type=stocks&page=Large%20Increase%"
                     + "20in%20Open%20Interest&dir=desc&sort=open_interest_change&filter_conditions=a%3A3%3A%7Bi%3A0%3Ba%"
                     + "3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%"
                     + "3A3%3A%22500%22%3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A13%3A%22open_interest%22%3Bi%"
                     + "3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%"
                     + "3A0%3Bs%3A20%3A%22open_interest_change%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%"
                     + "3A1%3A%220%22%3B%7D%7D&"
                     + "f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,open_interest_change,volatility,timestamp&"
                     + "n=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,O.I.%20Chg,Volatility,Time";
             
             String etfIncreaseOI = "http://www.barchart.com/option-center/getExcel.php?type=etfs&page=Large%20Increase%"
                     + "20in%20Open%20Interest&dir=desc&sort=open_interest_change&filter_conditions=a%3A3%3A%7Bi%3A0%3Ba%"
                     + "3A3%3A%7Bi%3A0%3Bs%3A6%3A%22volume%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%"
                     + "3A3%3A%22500%22%3B%7Di%3A1%3Ba%3A3%3A%7Bi%3A0%3Bs%3A13%3A%22open_interest%22%3Bi%"
                     + "3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%3A3%3A%22100%22%3B%7Di%3A2%3Ba%3A3%3A%7Bi%"
                     + "3A0%3Bs%3A20%3A%22open_interest_change%22%3Bi%3A1%3Bs%3A1%3A%22%3E%22%3Bi%3A2%3Bs%"
                     + "3A1%3A%220%22%3B%7D%7D&"
                     + "f=base_symbol,type,strike,expiration_date,bid,ask,last,volume,open_interest,open_interest_change,volatility,timestamp&"
                     + "n=Symbol,Type,Strike,Expiration,Bid,Ask,Last,Volume,Open%20Interest,O.I.%20Chg,Volatility,Time";
             
             String futures = "http://www.barchart.com/export.php?mode=I&symbols=DX*0,B6*0,D6*0,J6*0,S6*0,E6*0,A6*0,"
                     + "M6*0,N6*0,T6*0,L6*0,R6*0,CL*0,HO*0,RB*0,NG*0,QA*0,ZK*0,ZB*0,UD*0,ZN*0,ZF*0,ZT*0,ZQ*0,"
                     + "GE*0,ZW*0,ZC*0,ZS*0,ZM*0,ZL*0,ZO*0,ZR*0,KE*0,MW*0,RS*0,ES*0,NQ*0,YM*0,RJ*0,EW*0,VI*0,"
                     + "GD*0,LE*0,GF*0,HE*0,DL*0,GC*0,SI*0,HG*0,PL*0,PA*0,CT*0,OJ*0,KC*0,SB*0,CC*0,LS*0&fields=f"
                     + "p.name,futures.contract,last,change,open,high,low,displaytime&title=Futures+Prices&extension=.csv";
             
              try{
                  URL url  = new URL(stockVolatility);
                    URLConnection connect = url.openConnection();
                    InputStreamReader inStream = new InputStreamReader(connect.getInputStream());
                    BufferedReader buffer = new BufferedReader(inStream);
                    
                    while(buffer.readLine() != null){
                        nextLine = buffer.readLine();
                        //do something here with data
                        list.add(nextLine);
                    }
                }catch(Exception ex){
                    JOptionPane.showMessageDialog(null, ex);
          }return list;     
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    /**
     * Populates the list box with the options that match
     * the stock symbol.  
     * @param stock  string of the stock symbol
     */
    public void getSelectedData(String stock){
        DefaultListModel dlm = new DefaultListModel();
              int numOfDays = 0;
              
               for(int i=0;i<qoutes.size()-1;i++){
                String sym = symbol.get(i);
                
                if(sym.equals(stock)){//ifCostBurden.symbol(i)
                   numOfDays = getNumOfDays(expiration.get(i)) ;
                   double policyValue = Double.parseDouble(strike.get(i));
                   if(numOfDays != 0){
                       dlm.addElement(numOfDays + " Day "  + policyValue + " " 
                           + type.get(i) + " @ $" +last.get(i) +" : " + returns.get(i) + "%\n");
                    }
                }
          }IncomeSolution.listBox.setModel(dlm);
    }//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * Builds an instance of the gregorian calendar and then
     * with the parameter you can request the day, month or year
     * @param n 1 = year, 2 = month, & 5 = day_of_month
     * @return correct integer number of the day, month, or year
     */
    private int getDate(int n){
        GregorianCalendar gcal = new GregorianCalendar();
        switch (n) {
            case 1:
                return gcal.get(Calendar.YEAR);//n=1
            case 2:
                return gcal.get(Calendar.MONTH);//n=2
            case 5:
                return gcal.get(Calendar.DAY_OF_MONTH);//n=5
            default:
                break;
        }return 0;
    }
    
    
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * Takes in a  date string and returns each component.
     *  So "09/16/16" will give date[0] = 09 and so forth.
     * [0] = month [1] = day & [2] = year
     * @param expire string of expiration date
     * @return int array with corresponding components
     */
    private int[] getDateBreakdown(String expire){
        int day = Integer.parseInt(expire.substring(0,2));
        int month = Integer.parseInt(expire.substring(3,5));
        int year = Integer.parseInt(expire.substring(6, 8));
        return new int[]{month,day,2000+year};//mmDDyyyy
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * Takes a date string  of the expiration date and returns the correct number of days 
     * between the two dates.  
     */
    private int getNumOfDays(String expireDate){//the string that comes in is mmDDyy
        int[] parts = getDateBreakdown(expireDate);//returns an array already in correct format of mmDDyyy
        SimpleDateFormat sdf = new SimpleDateFormat("dd MM yyyy");
        String startDate =  getDate(5) + " " + (getDate(2) +1) +" " + getDate(1);//today ~ day -space- month -space- year
        String endDate = parts[0] + " " + parts[1] + " " + parts[2];
        int numOfDays = 0;
        //if expire day is lessthen today and expire month is greatthan or greater and expire year is greaterthan
        if((parts[0] <= getDate(5)) && (parts[1] <= (getDate(2)+1)) && parts[2] <= getDate(1)){
            return numOfDays = 0; 
        }else{
            final long DAYS_IN_MILLIS = 1000 * 60 * 60 * 24;
        try{
            Date d1 = sdf.parse(startDate);//today
            Date d2 = sdf.parse(endDate);//expiration date
            numOfDays = (int) ((d2.getTime() - d1.getTime()) / DAYS_IN_MILLIS);
        }catch(ParseException ex){
            JOptionPane.showMessageDialog( null, ex);
        }return numOfDays;
        }
    }
    
      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
     /**
     * Returns the future month code.
     * @param month string of the month of the contract
     * @return 
     */
    private char getFutureMonth(String month){
        switch (month) {
            case "January":
                return 'F';
            case "February":
                return 'G';
            case "March":
                return 'H';
            case "April":
                return 'J';
            case "May":
                return 'K';
            case "June":
                return 'M';
            case "July":
                return 'N';
            case "August":
                return 'Q';
            case "September":
                return 'U';
            case "October":
                return 'V';
            case "November":
                return 'X';
            default:
                //must be December
                return 'Z';
        }
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * 
     * @param commodity
     * @return 
     */
    public String getCommoditySymbol(String commodity){
         switch (commodity) {
            case "U.S. Dollar Index":
                return "DX";
            case "British Pound":
                return "B6";
            case "Canadian Dollar":
                return "D6";
            case "Japanese Yen":
                return "J6";
            case "Swiss Franc":
                return "S6";
            case "Euro FX":
                return "E6";
            case "Australian Dollar":
                return "A6";
            case "Mexican Peso":
                return "M6";
            case "New Zealand Dollar":
                return "N6";
            case "Brazilian Real":
                return "R6";
            case "Crude Oil WTI":
                return "CL";
            case "ULSD NY Harbor":
                    return "HO";
            case "Gasoline RBOB":
                return "RB";
            case "Natural Gas":
                return "NG";
            case "Crude Oil Brent (F)":
                return "QA";
            case "T-Bond":
                return "ZB";
            case "Ultra T-Bond":
                return "UD";
            case "10-Year T-Note":
                return "ZN";
            case "5-Year T-Note":
                return "ZF";
            case "2-Year T-Note":
                return "ZT";
            case "30-Day Fed Funds":
                return "ZQ";
            case "Eurodollar":
                return "GE";
            case "Wheart":
                return "ZW";
            case "Corn":
                return "ZC";
            case "Soybeans":
                return "ZS"; 
             case "Soybean Meal":
                return "ZM";
            case "Soybean Oil":
                return "ZL";
            case "Oats":
                return "ZO";
            case "Rough Rice":
                return "ZR";
            case "Hard Red Rice":
                return "KE";
            case "Spring Wheat":
                return "MW";
            case "Canola":
                return "RS";
            case "S&P 500 E-Mini":
                return "ES";
            case "Nasdaq 100 E-Mini":
                return "NQ";
            case "Dow  Indu 30 E-Mini":
                return "YM";
            case "Russell 2000 Mini":
                return "RJ";
            case "S&P Midcap E-Mini":
                return "EW";
            case "S&P 500 VIX":
                return "VI"; 
            case "S&P GSCI":
                return "GD";
            case "Live Cattle":
                return "LE";
            case"Feeder Cattle":
                return "GF";
            case"Lean Hogs":
                return "HE";
            case"Gold":
                return "GC";
            case"Silver":
                return "SI";
            case "High Grade Copper":
                return "HG";
            case "Platinum":
                return "PL";
            case "Palladium":
                return "PA";
            case "Cotton #2":
                return "CT";
            case "Orange Juice":
                return "OJ";
            case "Coffee":
                return "KC";
            case "Sugar #11":
                return "SB";
            case "Cocoa":
                return "CC";
            case "Lumber":
                return "LS";
            default:
                //must be December
                return "Not a correct Symbol";
         }
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * Returns string of the name of the futures contract given the
     * commodit symbol as the parameter.
     * @param commodity string of the commodity symbol
     * @return 
     */
    public String getCommodity(String commodity){
         switch (commodity) {
            case "ES":
                return "S&P_500_E-Mini_Futures";
            case "SI":
                return "Silver_Futures";
            case "GC":
                return "Gold_Futures";
            case "CL":
                return "Crude_Oil_WTI_Futures";
            case "RB":
                return "Gasoline_RBOB_Futures";
            case "NG":
                return "Natural_Gas_Futures";
            case "QA":
                return "Crude_Oil_Brent_(F)_Futures";
            case "NQ":
                return "Nasdaq_100_E-Mini_Futures";
            case "YM":
                return "Dow_Indu_30_E-Mini_Futures";
            case "RJ":
                return "Russell_2000_Mini_Futures";
            case "VI":
                return "S%26P_500_VIX_Futures";
            case "DX":
                    return "US_Dollar_Index_Futures";
            case "B6":
                return "British_Pound_Futures";
            case "D6":
                return "Canadian_Dollar_Futures";
            case "J6":
                return "Japanese_Yen_Futures";
            case "S6":
                return "Swiss_Franc_Futures";
            case "E6":
                return "Euro_FX_Futures";
            case "M6":
                return "Mexican_Peso_Futures";
            case "N6":
                return "New_Zealand_Dollar_Futures";
            case "L6":
                return "Brazilian_Real_Futures";
            case "ZB":
                return "T-Bond_Futures";
            case "UD":
                return "Ultra_T-Bond_Futures";
            case "ZN":
                return "10-Year_T-Note_Futures";
            case "ZF":
                return "5-Year_T-Note_Futures";
            case "ZT":
                return "2-Year_T-Note_Futures"; 
             case "ZQ":
                return "30-Day_Fed_Funds_Futures";
            case "GE":
                return "Eurodollar_Futures";
            case "ZW":
                return "Wheat_Futures";
            case "ZC":
                return "Corn_Futures";
            case "ZM":
                return "Soybean_Meal_Futures";
            case "ZL":
                return "Soybean_Oil_Futures";
            case "HG":
                return "High_Grade_Copper_Futures";
            case "PL":
                return "Platinum_Futures";
            case "PA":
                return "Palladium_Futures";
            case "CT":
                return "Cotton_2_Futures";
            case "OJ":
                return "Orange_Juice_Futures";
            case "KC":
                return "Coffee_Futures";
            case "SB":
                return "Sugar_11_Futures"; 
            case "CC":
                return "Cocoa_Futures";
            default:
                //must be December
                return "Not a correct Symbol";
        }
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    /**
     * Returns an arraylist of the available option contracts for the
     * given commodity.
     * @param commodity string of the commodity symbol
     * @return 
     */
    public ArrayList getAvailableOptionExpirations(String commodity){
        Document doc;
        ArrayList<String> available = new ArrayList<>();
        String option;
         
        try{
            doc = Jsoup.connect("http://www.barchart.com/commodityfutures/"
                    + getCommodity(commodity)
                    + "/options/" + commodity
                    + "*0").timeout(0).get();
            Element table= doc.select("table").get(3);
            Elements rows = table.select("tr");

            for(int i=0;i<rows.size();i++){
                Element row = rows.get(i);
                Elements cols = row.select("td");
                option = cols.text();
                available.add(option);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e);
        }return available;
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * Returns an arraylist of strings of every available option on
     * this cotract.
     * @param commodity string of commodity symbol
     * @param expiry string of the expiry month
     * @return 
     */
    public ArrayList getFutureOptions(String commodity, String expiry){
        Document doc;
        futureOptions = new ArrayList<>();
        tradingData = new ArrayList<>();
        String option;
         
        try{
            doc = Jsoup.connect("http://www.barchart.com/commodityfutures/" + getCommodity(commodity) 
                    + "/options/" 
                    + expiry
                    + "?view=split&mode=i").get();
            Element table= doc.select("table").get(6);
            Elements rows = table.select("tr");

            int n = rows.size();
            
            for(int i=1;i<n;i++){
                if(i == n -2|| i == n-1){
                    Element row = rows.get(i);
                    Elements cols = row.select("td");
                    option = cols.text();
                    tradingData.add(option);
                }else{
                    Element row = rows.get(i);
                    Elements cols = row.select("td");
                    option = cols.text();
                    futureOptions.add(option);
                }
            }
        } catch (IOException e){
            JOptionPane.showMessageDialog(null, e);
        }return futureOptions;
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * 
     * @param symbol
     * @param expiry
     */
    public void getSelectedData_F(String symbol, String expiry){
         DefaultListModel dlm = new DefaultListModel();
              ArrayList qoute = getFutureOptions(symbol, expiry);
              for(int i=0;i<qoute.size();i++){
                   dlm.addElement(qoute.get(i));
            }IncomeSolution.listBox.setModel(dlm);
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     * 
     * @param n uses contains(asset) so could be symbol
     * or name of contract
     * @return 
     */
      public String getFuturePrice(int n) {
        for (String last_F1 : last_F) {
            return last_F.get(n);
        }return null;
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    public void setArraysCols_F(){
        qoutes_F = getFutureOpportunities();
        
       name_F =  new ArrayList<>();
       contract_F = new ArrayList<>();
       last_F = new ArrayList<>();
      change_F = new ArrayList<>();
       open_F = new ArrayList<>();
        high_F = new ArrayList<>();
       low_F = new ArrayList<>();
       time_F = new ArrayList<>();
        returns_F = new ArrayList<>();
            
        /**
         * Isolate the name of market to add to name arraylist
         */
        for(int i=0;i<qoutes_F.size();i++){
            String name = null;
            int n = qoutes_F.get(i).lastIndexOf("(");
           name = qoutes_F.get(i).substring(0, n-7);
           name_F.add(name);
            contract_F.add(qoutes_F.get(i).substring(n-6, n+9));
            
            String remaining = qoutes_F.get(i).substring(n+10, qoutes_F.get(i).length()-1);
            String[] parts = remaining.split(" ");
            last_F.add(parts[0]);
            change_F.add(parts[1]);
            open_F.add(parts[2]);
            high_F.add(parts[3]);
            low_F.add(parts[4]);
            time_F.add(parts[5]);
        }
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    /**
     *  Breaks the original arraylist down into smaller arrays of the corresponding columns.
     */
    public  void setArrayCols(){
        qoutes = getOpportunities();
        
        returns = new ArrayList<>();
        symbol = new ArrayList<>();
        symbolOnceOnly = new ArrayList<>();
        type = new ArrayList<>();
        strike = new ArrayList<>();
        expiration = new ArrayList<>();
        bid = new ArrayList<>();
        ask = new ArrayList<>();
        last = new ArrayList<>();
        volume = new ArrayList<>();
        openInterest = new ArrayList<>();
        volatility = new ArrayList<>();
        time = new ArrayList<>();
        
    for(int i=0;i<qoutes.size()-1;i++){
        String[] parts = qoutes.get(i).split(",(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)"); 

        symbol.add(parts[0]);
        symbolOnceOnly.add(parts[0]);
        type.add(parts[1]);

         BigDecimal part;
        if(parts[2].startsWith("\"")){
            part = new BigDecimal("888");
        }else{
            part = new BigDecimal(parts[2]);
        }

        strike.add(part.toString());
        expiration.add(parts[3]);
        bid.add(parts[4]);
        ask.add(parts[5]);
        last.add(parts[6]);
        volume.add(parts[7]);
        openInterest.add(parts[8]);
        volatility.add(parts[9]);
        time.add(parts[10]);
        }
    
    //compute and then add the roi into the returns array for every i
        for(int i=0;i<qoutes.size()-1;i++){
            BigDecimal x = new BigDecimal(strike.get(i));
           
        if(type.get(i).equals("Put")){
              BigDecimal p = new BigDecimal(last.get(i));
                BigDecimal q = p.multiply(new BigDecimal("100")).divide(x, 2, RoundingMode.HALF_UP);
              returns.add(q.toString());
        }else{//must be a call
            
           returns.add("I am a call");
           }
        }
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    private void setHashSet(){
        LinkedHashSet hs = new LinkedHashSet();
        hs.addAll(symbolOnceOnly);
        symbolOnceOnly.clear();
        symbolOnceOnly.addAll(hs);
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    public String getContractSpecs(String commodity){
        Document doc;
        String contractSpecs = null;
        String option;
         
        try{
            doc = Jsoup.connect("http://www.barchart.com/futures/specifications.php").get();
            Element table= doc.select("table").get(3);
            Elements rows = table.select("tr");

            for(int i=0;i<rows.size();i++){
                Element row = rows.get(i);
                Elements cols = row.select("td");
                option = cols.text();
                
                if(option.contains(commodity)){
                    contractSpecs = option;
                }
            }
        } catch (IOException e){
            JOptionPane.showMessageDialog(null, e);
        }return contractSpecs;
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    
    public String getDaysToExpire(String commodity, String expiry){
        Document doc;
        ArrayList<String> days = new ArrayList<>();
        String details;
        String daysToExpire = null;
        try{
            doc = Jsoup.connect("http://www.barchart.com/commodityfutures/"
                    + getCommodity(commodity)
                    + "/options/" + expiry).get();
            Element table= doc.select("table").get(3);
            Elements rows = table.select("tr");

            for(int i=0;i<rows.size();i++){
                Element row = rows.get(i);
                Elements cols = row.select("td");
                details = cols.text();
                days.add(details);
            }
        daysToExpire = days.get(2);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, e);
        }return daysToExpire;
    }
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
}
